.tab-container
  - if !current_student || presenter.assignment.points_visible_for_student?(current_student)
    - if presenter.assignment.pass_fail?
      .italic= "#{term_for :pass}/#{term_for :fail} Assignment"
    - else
      .italic= "#{points presenter.assignment.point_total} points possible"

    - if presenter.assignment.threshold_points?
      .italic= "#{points presenter.assignment.threshold_points} points threshold"

  .italic= "Opens: #{presenter.assignment.open_at}" if presenter.assignment.open_at?
  .italic= "Due: #{presenter.assignment.due_at}" if presenter.assignment.due_at?

  - if presenter.assignment_accepting_submissions?(current_student)
    .no-bullet= render "students/submissions", assignment: presenter.assignment

  - if presenter.student_logged?(current_user)
    = render partial: "assignments/self_log_form", locals: { student: current_student, assignment: presenter.assignment }

  - if presenter.assignment.assignment_files.present?
    %hr.dotted
    %h4.uppercase Downloads
    %ul
      - presenter.assignment.assignment_files.each do |af|
        %li= link_to af.filename, af.url

  - if current_student.present?
    - @group = current_student.group_for_assignment(presenter.assignment)
    - if presenter.group_assignment?
      %hr.dotted
      - if @group.present?
        = render "groups/status_display", group: @group
        Your #{term_for :group} for this #{term_for :assignment}:
        %ul
          - @group.students.each do |student|
            %li= student.name
      - else
        = link_to glyph(:users) + "Create a #{term_for :group}", new_group_path, class: "button"

    - if presenter.assignment.is_unlockable?
      %hr.dotted
      - if presenter.assignment.is_unlocked_for_student?(current_student)
        .italic You have unlocked this #{term_for :assignment}. To achieve this you:
        %ul
          - presenter.assignment.unlock_conditions.each do |condition|
            %li
              = condition.requirements_completed_sentence
              - if presenter.assignment.has_groups? && @group.present?
                = "(#{condition.count_unlocked_in_group(@group)}/#{@group.students.count} #{term_for :group} members have completed this requirement)"
        - if presenter.assignment.has_groups? && @group.present?
          - if ! presenter.assignment.is_unlocked_for_group?(@group)
            All #{term_for :group} members must complete the unlock conditions before the #{term_for :group} can proceed
          - else
            Congratulations! Your #{term_for :group} has successfully unlocked this #{term_for :assignment}
        - if presenter.assignment.has_groups? && ! @group.present?
          You must create a #{term_for :group} to complete this #{term_for :assignment}

      - else
        %i.fa.fa-lock
        Unlock Requirements
        .italic You have not unlocked this #{term_for :assignment}. To achieve this you must:
        %ul
          - presenter.assignment.unlock_conditions.each do |uc|
            %li= link_to uc.requirements_description_sentence, uc.condition

  - if presenter.assignment.is_a_condition?
    %hr.dotted
    %i.fa.fa-key
    This #{term_for :assignment} is a Key
    %ul
      - presenter.assignment.unlock_keys.each do |key|
        %li= link_to key.key_description_sentence, key.unlockable

  - if presenter.assignment_has_viewible_description?(current_user)
    %hr.dotted
    %h4.uppercase Guidelines:
    %p= raw presenter.assignment.description

  - if presenter.assignment_has_viewible_purpose?(current_user)
    %hr.dotted
    %h4.uppercase Purpose:
    %p= raw presenter.assignment.purpose

  - if presenter.assignment.assignment_type.description.present?
    %hr.dotted
    %h4.uppercase #{ presenter.assignment.assignment_type.name} Guidelines:

    %p= raw presenter.assignment.assignment_type.description
